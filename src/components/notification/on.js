import React, { Component } from 'react';
import { TextField } from 'react-native-material-textfield';
import PushNotification from 'react-native-push-notification';
// var PushNotification = require('react-native-push-notification');

import Hr  from 'react-native-hr'
import {
    StyleSheet,
    View,
    TextInput,
    TouchableOpacity,
    Text,
    Image,
    AppState,
    Platform
} from 'react-native';

import axios from 'axios';
import { connect } from 'react-redux'
import * as Actions from '../../action';

let textname;

class On extends Component {
    static navigationOptions = {
        title: 'Welcome',
    };
    constructor(props) {
        super(props);

        // this.handleAppStateChange = this.handleAppStateChange.bind(this);
        this.state = {
            textStyle:[styles._textInput, styles._textInput],
            flag: false,
            // token: this.props.token.accessToken
        }
    }
    

//    componentWillUnMount() {
//      AppState.removeEventListener('change', this.handleAppStateChange);
//    }
  

    changecolor(index) {
            textname=styles.textInput;
            let temp=[styles._textInput, styles._textInput];
            temp[index]=textname;
            this.setState({textStyle:temp});
    }

//     push = () => {
//         PushNotification.configure({

    
//             // onRegister : function(token) {
//             //     console.log('TOKEN', token);
//             // },

//             onNotification: function(notification) {
//                 console.log( 'NOTIFICATION:', notification );
//             },

//         permissions: {
//             alert: true,
//             badge: true,
//             sound: true
//         },
        
    
//     });
//     // AppState.addEventListener('change', this.handleAppStateChange);
//   }

//   handleAppStateChange(appState) {
//     if (appState === 'background') {
//       let date = new Date(Date.now() + (6 * 1000));

//       if (Platform.OS === 'ios') {
//         date = date.toISOString();
//       }

//       PushNotification.localNotificationSchedule({
//         message: "My Notification Message",
//         date,
//       });
   
//     }
//   }
componentWillMount() {
    PushNotification.configure({

    // (optional) Called when Token is generated (iOS and Android)
    

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },

    // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
    // senderID: "YOUR GCM SENDER ID",

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
        alert: true,
        badge: true,
        sound: true
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
});
  }

  componentDidMount() {
    // setTimeout(() => {
//        PushNotification.localNotification({
//     /* Android Only Properties */
//     id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
//     ticker: "My Notification Ticker", // (optional)
//     autoCancel: true, // (optional) default: true
//     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
//     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
//     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
//     subText: "This is a subText", // (optional) default: none
//     color: "red", // (optional) default: system default
//     vibrate: true, // (optional) default: true
//     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
//     tag: 'some_tag', // (optional) add tag to message
//     group: "group", // (optional) add group to message
//     ongoing: false, // (optional) set whether this is an "ongoing" notification

//     /* iOS only properties */
    

//     /* iOS and Android properties */
    
//     message: "My Notification Message", // (required)
//     playSound: false, // (optional) default: true
//     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
//     number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
//     repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
//     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
// });
    // }, 3000)
//    if (appState === 'background') {
    //   let date = new Date(Date.now() + (2 * 1000));

    //   if (Platform.OS === 'ios') {
    //     date = date.toISOString();
    //   }

    //   PushNotification.localNotificationSchedule({
    //     message: "My Notification Message",
    //     date,
    //   });
//   }
  }

  componentWillUnMount() {
      cancelAllLocalNotifications()
  }
    render() {
        const { navigate } = this.props.navigation;
        return (
            <View style={styles.container}>
                <View style={styles.view1}>
                    <Text style={styles.text1}>Turn on your notifications</Text>
                    <View style={{marginTop:20, width:'17%'}}>
                        <Hr lineColor='#7FD6F6' />
                    </View>
                    <Text style={styles.text2}>
                        You live a busy life. You may {"\n"}
                        not know when the payments {"\n"}
                        are due and turning the {"\n"}
                        notifictions on will actually {"\n"}
                        help you keep track of it {"\n"}
                        {"\n"}
                        You can always change your {"\n"}
                        preference using the Settings {"\n"}
                        on your phone     
                    </Text>
                </View>
                <View style={styles.view2}>
                    
                        <View style={this.state.textStyle[0]}>
                            <Text onPress={() =>{this.changecolor(0); this.setState({flag: true}); navigate('Process')}}>ON</Text>
                        </View>
                        {this.state.flag == false ?
                            <View style={[styles.textInput, {marginLeft: 40}]}> 
                            <Text  onPress={() =>{PushNotification.cancelAllLocalNotifications();navigate('Process')}}>OFF</Text>
                        </View>
                        
                        :<View style={[this.state.textStyle[1], {marginLeft: 40}]}> 
                           
                            <Text  onPress={() =>{PushNotification.cancelAllLocalNotifications();this.changecolor(1);navigate('Process');this.setState({flag: false}); }}>OFF</Text>
                        </View>}
                       
                    
                </View>
                
            </View>
        )
    }
}
const styles=StyleSheet.create({
    container: {
        flex:1, 
        backgroundColor: 'white'
    },
    view1: {
        flex:2, 
        marginTop: 80, 
        marginLeft: 40
    },
    text1: {
        fontSize: 25, 
        fontFamily:'avenir_medium', 
        color: '#6BA624'
    },
    text2: {
        marginTop:30,
        fontSize: 18, 
        fontFamily:'Avenir',
        color: '#222222',
        lineHeight: 27
    },
    view2: {
        flex:1, 
        marginLeft: 40,
        flexDirection:'row'
    },
    textInput: {
        height: 43,
        backgroundColor:'#7FD6F6',
        width:'20%',
        alignItems: "center",
        justifyContent: 'center',
        borderRadius: 27,
        
    },
    _textInput: {
        height: 43,
        width:'20%',
        alignItems: "center",
        justifyContent: 'center',
       
        
    },
})

const mapStateToProps = (state) => {
  return {
        token: state.token.token,
        
    }
}

export default connect(mapStateToProps)(On)